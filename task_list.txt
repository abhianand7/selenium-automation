Walmart Grocery Class:

first:
Make sure the script can run on a server (non-desktop) version of ubuntu

(1)
method: add_to_cart
POST https://grocery.walmart.com/v0.1/api/cart
A method that takes a list of integers (item numbers) and adds all the items to the shopping cart.
Returns true if the items have been successfully added to the logged in user's shopping cart.
Returns false if any errors occur.
POST data example:
[{"skuId":"3000011733","quantity":1}]

(2)
method: get_cart
GET https://grocery.walmart.com/v0.1/api/cart
Takes no parameters but returns the same JSON object that was retrieved from the GET request
Return value example:
{"id":"406485340","items":[{"data":{"id":"3000014678","status":"A","name":"Bananas, 1 lb.","maxAllowed":100,"showNotAvailable":false,"images":{"thumbnail":"http://t9.wal.co/i/p/00/74/92/89/00/0074928900002_150X150.jpg-f6ea6212af89e595a8031fd0f104960bc90ff249-optim-150x150.jpg","small":"http://t9.wal.co/i/p/00/74/92/89/00/0074928900002_150X150.jpg-f6ea6212af89e595a8031fd0f104960bc90ff249-optim-150x150.jpg","large":"http://t9.wal.co/i/p/00/74/92/89/00/0074928900002_215X215.jpg-9fac9ce45c366a812bb39e9337cd14059943734c-optim-215x215.jpg"},"isOutOfStock":false},"price":{"list":0.52,"priceUnitOfMeasure":"LB","salesUnitOfMeasure":"LB","salesQuantity":1,"unit":0.52,"isRollback":false,"isClearance":false},"total":0.52,"quantity":1}],"minimumTotalForCheckout":30,"total":0.52}

(3)
Test program that runs periodically to ensure stability of the script.
It should perform all avaliable tasks and take some kind of action to alert the administrator of problems.
Possibly email alert, but that can be added in later.
(all of the estimates below mentioned is by assuming 3 to 4 hour of work per day), if needs to get this done more quick, can be discussed

Below is the plan for web development
components ot be used:
1. Django-CMS (Intial goal is to display recepies and redirect them to grocery store for purchase)
2. Django-Oscar(Will be added afterwards, after properly reviewing the intial launch of the website and what exaclty is needed
    for this specific purpose)
3. Python-Django framework (basic need for Django)
4. Server(Initial developement will be done locally)
5. AWS - Need to setup an AWS server with ubuntu
6. Sql Server stup (for now local)

Initial website views:
-Home page (back-end will be quick for this, front requires a little time, approx 2 days for this)
  *This will contain images/videos and marketing/introduction data as well as navigation to other pages
-User login (at max 2 days, this seems to be quick job but may take more time as, this requires sql mapping with user credentials)
  *Simple login form and link to registration page
-User registration (most back-end focused job, this will take at most 2 days, can also be as quick as few hours)
  *Basic user registration:
    -First name
    -Last name
    -date of birth
    -zip code (US only)
    -gender
    -email
    -confirm email
    -password
    -confirm password
  *Email link to confirm account before activating account
-User profile/password management 
  (Initially since the website will have no option for add ot cart but rather redirecting to another server,
  for now we will display only history of recepies browsed and the items associated with it)  (this will take no more than 2 to 3days)
  *change any user settings except name and date of birth
  *History of recipes added to shopping carts
-Recipe browse page(s) 
  (very easy to do with CMS, just drag and drop content, will take at max 2 days depending on the number of recepies)
  *sidebar with recipe categories
  *featured recipes on main body with images
-Recipe page (as talked and this will take less time as it will be provided, just need to rearraneg a little bit, so at max 4 to 5 days)
  *Recipe overview
  *ingredients (with add to cart link)  (I will also add a '+' button for the user to add the ingredients to cart individually as well
  so that, in case they have some the ingredients at their house they dont have to add to cart all of the items)
  *steps for preparation
-Add ingredients to cart page (for now only Walmart grocery will be avaiable, but placeholders for other grocery services)
  (bacckground script will be running continoulsy to make this process quick, already under development)
  *Grid of avaiable providers
  *Walmart link prompts for your Walmart email and password (which is not stored)
  *Items are added to the card using the walmart Class
  *Record in DB the ingredients ordered and the source recipe

Visual design of the website should be fairly simple and will mimick www.blueapron.com, which is the website I wish to compete with.
It doesn't need to be as fancy as the Blue Apron website, but when in doubt, use that as a style reference. I will come up with some mocks
later when we are more concerned about visual design.